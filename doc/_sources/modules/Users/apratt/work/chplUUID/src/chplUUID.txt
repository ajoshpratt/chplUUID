.. default-domain:: chpl

.. module:: chplUUID
   :synopsis: A basic module to generate v4 UUIDs.  Pulls from /dev/urandom, and is thread

chplUUID
========
**Usage**

.. code-block:: chapel

   use chplUUID;



A basic module to generate v4 UUIDs.  Pulls from /dev/urandom, and is thread
safe as it implements utilizes a lock (ensuring that only one task may pull
from the entropy source at a time).

.. highlight:: chapel

::

  use chplUUID;
  var UUID = new owned chplUUID.UUID();
  var id = UUID.UUID4(); // id is a v4 UUID




.. class:: UUID

   
   
   The module itself.  It uses the included rng module to pull 8 random bits
   from /dev/urandom directly.  This is considered a write locking operation,
   where the lock is done here and not on the rng module, so that only one task
   is allowed to pull from the entropy source at a time.  Otherwise, collisions
   are guaranteed.
   
   There are no user defined variables.
   
   


   .. attribute:: var entropySource = new owned UDevRandomHandler()

   .. attribute:: var remainder: [0..#2] string

   .. attribute:: var uuid_int_rep: [1..16] uint(8)

   .. attribute:: var lock: shared spinlock.SpinLock

   .. method:: proc init()

   .. method:: proc pull_random_data()

      
      
      UUID creation requires 128 bits of data, which Chapel does not inherently
      support.  Instead, we pull 8 bits at a time and store it into an associative
      array so that we can perform the necessary operations on the appropriate
      length of data.
      
      

   .. method:: proc convert_to_uuid4()

      
      
      For UUID4 compliant ids, after pulling 128 bits of random data, certain
      elements have particular bitwise operations done on them.  This does that.
      
      

   .. method:: proc convert_to_hex(x: uint)

      
      
      Converts an integer into a hexadecimal, represented as a string.  Does this
      through the use of bitwise operations.  Assumes little endian.  This is
      the second, and final, step of the UUID creation.
      
      

   .. method:: proc UUID4() throws

      
      
      The only procedure that should be called by the end user.  Quick and easy!
      
      

